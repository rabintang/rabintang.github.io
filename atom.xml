<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>槟糖&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rabin.tech/"/>
  <updated>2018-12-20T02:09:42.844Z</updated>
  <id>http://rabin.tech/</id>
  
  <author>
    <name>Rabin Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Deep neural network marketplace recommenders in online experiments》阅读笔记</title>
    <link href="http://rabin.tech/2018/12/20/%E3%80%8ADeep-neural-network-marketplace-recommenders-in-online-experiments%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://rabin.tech/2018/12/20/《Deep-neural-network-marketplace-recommenders-in-online-experiments》阅读笔记/</id>
    <published>2018-12-20T02:09:42.000Z</published>
    <updated>2018-12-20T02:09:42.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>论文作者来自一家电商公司，主要论述了三种方法在推荐系统线上应用的效果：结合商品内容以及用户行为的商品embedding学习；利用前面学习到的商品的embedding表达，结合RNN的用户行为序列建模；以及利用MAB来实现的reranking（其实没有看到探索的介绍，很简单）。论文整体上质量一般，比较有亮点的地方就是学习图像embedding的方法，以及采用Siamese Network的使用。</p></blockquote><h4 id="商品embedding表示学习"><a href="#商品embedding表示学习" class="headerlink" title="商品embedding表示学习"></a>商品embedding表示学习</h4><blockquote><p>作者先用不同的submodel分别得到商品基于行为、文本、图像，以及位置的embedding，然后将各种来源的embedding concat在一起，然后接了一个attention层以对不同来源的embedding加权，接着用MLP对embedding向量做压缩，得到100的向量embedding向量。作者通过图像领域常用的Siamese Network来对整个网络进行学习，并假设同一用户同一天转化的商品为相似商品，否则为不相似商品。</p></blockquote><img src="/2018/12/20/《Deep-neural-network-marketplace-recommenders-in-online-experiments》阅读笔记/markdown-img-paste-20181220082313811.png" title="商品embedding网络结构图"><h5 id="商品各来源embedding计算"><a href="#商品各来源embedding计算" class="headerlink" title="商品各来源embedding计算"></a>商品各来源embedding计算</h5><ul><li><strong>用户行为</strong>：利用标准的ALS算法，学习得到每个商品基于用户行为数据的表达；</li><li><p><strong>文本数据</strong>：作者利用TextCNN训练了一个其业务内的文本分类器，然后将商品的标题和描述过一遍该分类器，将网络的顶层（应该是softmax的前一层）拎出来作为文本的embedding向量；</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作者这里采用监督学习算法得到文本的embedding表达，相比通过avg(word embedding)得到的embedding表达，效果应该会要好一些，但是选择哪个业务的文本分类模型，也是一个比较偏实际应用的问题。</span><br></pre></td></tr></table></figure></li><li><p><strong>图像数据</strong>：这个比较有亮点，作者不是采用常规的做法，用图像类标作为监督的目标，而是将商品的标题通过word embedding得到title embedding之后，训练模型，用图像来预测该title embedding，从而学到图像更丰富的表达。作者对这种做法的解释是：标题描述给出了更丰富的信息，比如<code>wedding dress</code> vs <code>summer dress</code>，假如用类标<code>dress</code>，则无法对这种细节信息进行区分。作者用预训练好的Inception-v3作为网络结构，用MSE作为Loss Function；</p></li><li><strong>位置信息</strong>：作者没有采用LBS的距离信息来表示embedding，而是通过<code>user-postcode</code>行为矩阵，通过ALS学习位置的embedding表达；</li></ul><h5 id="各来源embedding的融合"><a href="#各来源embedding的融合" class="headerlink" title="各来源embedding的融合"></a>各来源embedding的融合</h5><blockquote><p>作者主要通过一个attention层来对不同来源的embedding做加权。每个来源的embedding都被表示为100维的向量。作者没有详细说明attention的做法，有知道具体做法的欢迎留言。</p></blockquote><h5 id="模型参数学习"><a href="#模型参数学习" class="headerlink" title="模型参数学习"></a>模型参数学习</h5><p>作者通过图像领域常用的<code>Siamese Network</code>来学习多来源embedding融合后的网络的参数，并假设同一用户同一天有过转化的商品是相似商品，否则是不相似商品。记得14年有一篇NLP的网红文也采用了类似的思想来训练模型。这种思想还是很经典，很值得思考的，在缺少标注数据的场景下，这种做法很值得尝试，比非监督学习算法应该会有一定的效果提升。</p><h4 id="基于序列的模型"><a href="#基于序列的模型" class="headerlink" title="基于序列的模型"></a>基于序列的模型</h4><p>作者用一个单层的GRU模型，用用户历史行为序列作为输入，来预测用户未来的点击序列。作者采用上节方法得到的商品embedding作为商品的embedding表达。方法上中规中矩，没有太多创新。</p><h4 id="MAB"><a href="#MAB" class="headerlink" title="MAB"></a>MAB</h4><p>本质就是一个点击率预估模型，没有什么亮点可言，略感失望。<br><img src="/2018/12/20/《Deep-neural-network-marketplace-recommenders-in-online-experiments》阅读笔记/markdown-img-paste-2018122009414371.png" title="Deep MAB"></p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p>[1] <a href="https://arxiv.org/pdf/1809.02130.pdf" target="_blank" rel="noopener">《Deep neural network marketplace recommenders in online experiments》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;论文作者来自一家电商公司，主要论述了三种方法在推荐系统线上应用的效果：结合商品内容以及用户行为的商品embedding学习；利用前面学习到的商品的embedding表达，结合RNN的用户行为序列建模；以及利用MAB来实现的reranking（其实
      
    
    </summary>
    
      <category term="推荐系统" scheme="http://rabin.tech/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="论文阅读" scheme="http://rabin.tech/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="推荐系统" scheme="http://rabin.tech/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="工程实现" scheme="http://rabin.tech/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E7%8E%B0/"/>
    
      <category term="论文笔记" scheme="http://rabin.tech/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo，github，atom搭建个人博客</title>
    <link href="http://rabin.tech/2018/12/19/hexo-github-atom-blogs/"/>
    <id>http://rabin.tech/2018/12/19/hexo-github-atom-blogs/</id>
    <published>2018-12-19T08:40:55.000Z</published>
    <updated>2018-12-19T08:40:55.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo的配置与使用"><a href="#hexo的配置与使用" class="headerlink" title="hexo的配置与使用"></a>hexo的配置与使用</h3><h5 id="hexo的基础用法"><a href="#hexo的基础用法" class="headerlink" title="hexo的基础用法"></a>hexo的基础用法</h5><ul><li><p>hexo的安装</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>hexo博客站点搭建</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog  <span class="comment"># 创建名为blog的博客站点</span></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ hexo new [draft/post/page] name  <span class="comment"># 新建名为name的草稿/文章/页面，默认为post</span></span><br><span class="line">$ hexo g &amp; hexo s  <span class="comment"># 生成静态网页并启动本地服务器，之后便可以通过http://localhost:4000/访问</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="hexo的主题设置"><a href="#hexo的主题设置" class="headerlink" title="hexo的主题设置"></a>hexo的主题设置</h5><blockquote><p>推荐<a href="https://theme-next.iissnan.com" target="_blank" rel="noopener"><em>next</em></a>主题，简洁且经典</p><ol><li>下载theme到<code>/path/to/blog/themes</code>目录下；</li><li>修改<code>/path/to/blog/_config.yml</code>文件中的<code>theme</code>字段为要设置的theme的目录名；</li><li><code>hexo g &amp; hexo s</code>重新生成静态文件预览；</li></ol></blockquote><h3 id="用git平台作免费空间"><a href="#用git平台作免费空间" class="headerlink" title="用git平台作免费空间"></a>用git平台作免费空间</h3><h5 id="配置github仓库"><a href="#配置github仓库" class="headerlink" title="配置github仓库"></a>配置github仓库</h5><ol><li>在github创建一个Repository Name与用户名一致的项目；</li><li>安装<code>hexo-deployer-git</code>插件：<code>npm install hexo-deployer-git --save</code>;</li><li><p>修改<code>_config.yml</code>文件的deploy属性：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: https://github.com/rabintang/rabintang.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>发布文章到github，运行<code>hexo g &amp; hexo d</code>即可；</p></li></ol><h5 id="配置coding平台仓库"><a href="#配置coding平台仓库" class="headerlink" title="配置coding平台仓库"></a>配置<a href="https://coding.net" target="_blank" rel="noopener">coding平台</a>仓库</h5><ol><li>跟github类似，创建一个Repository Name与用户名同名的项目；</li><li>修改<code>_config.yml</code>文件的中deploy属性： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: https://github.com/rabintang/rabintang.github.io</span><br><span class="line">    coding: git@git.coding.net:rabintang/rabintang.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><h5 id="配置域名访问规则"><a href="#配置域名访问规则" class="headerlink" title="配置域名访问规则"></a>配置域名访问规则</h5><blockquote><p>原则：国外IP访问博客站点时，用github作为站点提供服务，国内IP访问博客站点时，用coding作为站点提供服务。</p></blockquote><img src="/2018/12/19/hexo-github-atom-blogs/万网配置.png" title="万网配置"><h5 id="原始文件保存与多机同步"><a href="#原始文件保存与多机同步" class="headerlink" title="原始文件保存与多机同步"></a>原始文件保存与多机同步</h5><blockquote><p>方法1：将生成的静态页发布到github/coding平台博客项目的<code>master</code>分支，将源文件同步到github的<code>hexo</code>分支。<br>方法2：创建一个新的github项目，专门用来存放hexo的源文件；<br>因为方法2比较简单，因此这里只介绍方法1的详细做法，方法2类似。</p></blockquote><ol><li><p>关联github项目</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/blog</span><br><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/xx/xx.github.io</span><br></pre></td></tr></table></figure></li><li><p>创建<code>hexo</code>分支并提交</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;add hexo&apos;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></li><li><p>修改github项目的主分支为<code>hexo</code>：<em>Settings -&gt; Branchs -&gt; Default branch</em></p></li><li>其他机器初始化 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xx/xx.github.io</span><br><span class="line">cd xx.github.io</span><br><span class="line">git checkout hexo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><h3 id="hexo写作技巧"><a href="#hexo写作技巧" class="headerlink" title="hexo写作技巧"></a>hexo写作技巧</h3><h5 id="在文章中插入图片"><a href="#在文章中插入图片" class="headerlink" title="在文章中插入图片"></a>在文章中插入图片</h5><ul><li><p>通过同级的资源文件目录：</p><p>  将 <code>_config.yml</code> 文件中 <code>post_asset_folder</code> 设置为 <code>true</code>，即可以在创建文章时，在同级目录创建一个资源文件夹。通过<code>![](image.jpg)</code>即可在文章中插入资源文件夹中的图片。</p><p>  但是上面相对路径的方式，只能在文章页正确显示图片，要想在首页等其他页面也正确显示图片，要采用标签插件语法：<code></code>。</p></li><li><p>通过全局资源文件目录：</p><p>  创建<code>source/images</code>文件夹，将图片存放在该文件夹，在文章中通过<code>![](/images/image.jpg)</code>来访问图片路径，即可以在所有地方都正确显示图片。</p></li><li><p>通过CDN存放资源文件：</p><p>  当然也可以通过CDN来存放图片等资源文件，推荐 <a href="https://jiantuku.com/" target="_blank" rel="noopener">极简图床</a> 和 <a href="https://www.qiniu.com" target="_blank" rel="noopener">七牛云</a> 来搭建免费的图床CDN。极简图床提供了chrome插件，方便图片的上传和管理。</p></li></ul><h5 id="写作流程"><a href="#写作流程" class="headerlink" title="写作流程"></a>写作流程</h5><blockquote><p>draft -&gt; post</p><ol><li>创建草稿：<code>hexo new draft blog_name</code>；</li><li>发布草稿：<code>hexo publish blog_name</code>；</li></ol></blockquote><h5 id="管理分类与标签"><a href="#管理分类与标签" class="headerlink" title="管理分类与标签"></a>管理分类与标签</h5><h6 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h6><ol><li>创建cateogries页面：<code>hexo new page categories</code>；</li><li><p>修改<code>/path/to/blog/source/categories/index.md</code>内容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2018-11-10 11:19:48</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>给文章添加categories属性：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: *******</span><br><span class="line">categories:</span><br><span class="line">  - category1</span><br><span class="line">  - category2</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p> 注意hexo每篇文章只会属于一个类目，如上面设置两个category，则会将文章归到<code>category1 / category2</code>这样的目录结构，其中，<code>category2</code>是<code>category1</code>的子目录。</p></li></ol><h6 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h6><ol><li>创建tags页面：<code>hexo new page tags</code>;</li><li><p>修改<code>/path/to/blog/source/tags/index.md</code>内容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2018-11-10 11:23:25</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>给文章添加tags属性：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: *******</span><br><span class="line">tags:</span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p> 不同于categories，每篇文章可以属于多个tags。</p></li></ol><h3 id="用atom作为写作工具"><a href="#用atom作为写作工具" class="headerlink" title="用atom作为写作工具"></a>用atom作为写作工具</h3><h5 id="atom-tricks汇总"><a href="#atom-tricks汇总" class="headerlink" title="atom tricks汇总"></a>atom tricks汇总</h5><ul><li>控制面板快捷键：<code>shift+cmd+p</code></li></ul><h5 id="atom的插件推荐"><a href="#atom的插件推荐" class="headerlink" title="atom的插件推荐"></a>atom的插件推荐</h5><ul><li>markdown-preview-enhanced：对atom默认的markdown进行了强化，提供了不少有用功能，网上也有不少文件推荐各种markdown插件的组合，但是感觉还是安装这一个插件方便，毕竟入门的话定制化不需要那么强；</li><li>platformio-ide-terminal：在atom的底部显示terminal窗口，方便在当前目录执行命令，打开terminal窗口快捷键<code>shift+cmd+t</code>，关闭terminal窗口快捷键<code>shift+cmd+x</code>；</li><li>markdown-writer：暂时没有用到；</li><li>simplified-chinese-menu：atom汉化插件，给有需要的人；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hexo的配置与使用&quot;&gt;&lt;a href=&quot;#hexo的配置与使用&quot; class=&quot;headerlink&quot; title=&quot;hexo的配置与使用&quot;&gt;&lt;/a&gt;hexo的配置与使用&lt;/h3&gt;&lt;h5 id=&quot;hexo的基础用法&quot;&gt;&lt;a href=&quot;#hexo的基础用法&quot; c
      
    
    </summary>
    
      <category term="其他技术" scheme="http://rabin.tech/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="基础工具" scheme="http://rabin.tech/tags/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
